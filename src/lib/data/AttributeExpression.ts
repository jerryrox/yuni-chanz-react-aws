import { AttributeValue } from "@aws-sdk/client-dynamodb";

interface IAddExpression {
    [key: string]: AttributeValue;
}

interface IDeleteExpression {
    [key: string]: AttributeValue;
}

interface ISetExpression {
    [key: string]: AttributeValue;
}

interface IRawExpressions {
    ADD?: IAddExpression;
    DELETE?: IDeleteExpression;
    REMOVE?: string[];
    SET?: ISetExpression;
}

interface IAttributeNames {
    [key: string]: string;
}

interface IAttributeValues {
    [key: string]: AttributeValue;
}

interface IBuildResult {
    UpdateExpression?: string;
    ExpressionAttributeNames?: IAttributeNames;
    ExpressionAttributeValues?: IAttributeValues;
}

export default class AttributeExpression {

    private rawExpressions: IRawExpressions = {};
    
    
    /**
     * Creates a new AttributeExpression instance using the specified plain data generated by AwsModelConverter.
     * The update expression will represnt a SET action.
     */
    static setFromPlain(data: Record<string, AttributeValue>): AttributeExpression {
        const expression = new AttributeExpression();
        for(const key in data) {
            expression.setAttribute(key, data[key]);
        }
        return expression;
    }

    /**
     * Adds the specified key/value attribute entry for SET action.
     */
    setAttribute(key: string, value: AttributeValue) {
        if(this.rawExpressions.SET === undefined) {
            this.rawExpressions.SET = {};
        }
        this.rawExpressions.SET[key] = value;
    }

    /**
     * Adds the specified key/value attribute entry for ADD action.
     */
    addAttribute(key: string, value: AttributeValue) {
        if(this.rawExpressions.ADD === undefined) {
            this.rawExpressions.ADD = {};
        }
        this.rawExpressions.ADD[key] = value;
    }

    /**
     * Adds the specified attribute key for REMOVE action.
     */
    removeAttribute(key: string) {
        if(this.rawExpressions.REMOVE === undefined) {
            this.rawExpressions.REMOVE = [];
        }
        this.rawExpressions.REMOVE.push(key);
    }

    /**
     * Deletes the specified attribute key for DELETE action.
     */
    deleteAttribute(key: string, value: AttributeValue) {
        if(this.rawExpressions.DELETE === undefined) {
            this.rawExpressions.DELETE = {};
        }
        this.rawExpressions.DELETE[key] = value;
    }

    /**
     * Returns the expression values for inputting into DDB commands.
     */
    build(): IBuildResult {
        const expressions: string[] = [];
        const names: IAttributeNames = {};
        const values: IAttributeValues = {};

        if(this.rawExpressions.ADD !== undefined) {
            expressions.push(`ADD ${Object.keys(this.rawExpressions.ADD).map((key) => {
                names[`#${key}`] = key;
                values[`:${key}`] = this.rawExpressions.ADD![key];

                return `#${key} :${key}`;
            }).join(", ")}`);
        }

        if(this.rawExpressions.DELETE !== undefined) {
            expressions.push(`DELETE ${Object.keys(this.rawExpressions.DELETE).map((key) => {
                names[`#${key}`] = key;
                values[`:${key}`] = this.rawExpressions.DELETE![key];

                return `#${key} :${key}`;
            }).join(", ")}`);
        }

        if(this.rawExpressions.REMOVE !== undefined) {
            expressions.push(`REMOVE ${this.rawExpressions.REMOVE.map((key) => {
                names[`#${key}`] = key;

                return `#${key}`;
            }).join(", ")}`);
        }

        if(this.rawExpressions.SET !== undefined) {
            expressions.push(`SET ${Object.keys(this.rawExpressions.SET).map((key) => {
                names[`#${key}`] = key;
                values[`:${key}`] = this.rawExpressions.SET![key];

                return `#${key} = :${key}`;
            }).join(", ")}`);
        }

        return {
            UpdateExpression: expressions.length === 0 ? undefined : expressions.join(", "),
            ExpressionAttributeNames: Object.keys(names).length === 0 ? undefined : names,
            ExpressionAttributeValues: Object.keys(values).length === 0 ? undefined : values,
        };
    }
}